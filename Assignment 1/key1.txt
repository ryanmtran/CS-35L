Ryan Tran
905099275
Assignment 1
Homework
------------
Exercise 1.1
2. C-s H T M L Enter
3. C-s s c a v e n g e r C-M-r Enter
4. C-s s e l f - r e f e r e n t i a l C-M-r Enter
5. C-s a r r o w C-M-r Enter
6. C-e
7. C-a
8. Instead of using the arrow keys, I used the emacs commands as written in the previous questions
9. No, I did not move the cursor using the arrow keys
10. C-x C-c

Exercise 1.2
2. M-g g 1 9 Enter C-k
3. C-s D E L E T E - M E C-a C-k
4. C-s w i k i p e d i a C-s C-a C-p C-k C-k C-k C-k C-k
5.
   C-s < ! - C-M-r M-z >
   C-s < ! - C-M-r C-SP C-n C-n C-n C-e C-w
   C-s < ! - C-M-r C-k

Exercise 1.3
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 4 2 Enter SP SP Enter
3. M-< M-% U T F - 8 Enter U S - A S C I I Enter SP Enter
4. M-< M-x f l u s h - l i n e s Enter [ ^ [ : a s c i i : ] ] Enter
5. C-s < / o l > C-e C-o

Exercise 1.4
3. M-> C-r < ! C-SP C-e M-w C-r < / h t m l > C-r C-e C-n C-y
4. M-> C-r < ! - C-r C-SP C-n C-n C-n C-e M-w M-< C-s s h o u l d SP o u t p u t C-n C-y
   M-> C-r < ! - C-r C-r C-SP C-f C-f C-f C-f C-f C-f C-f M-w M-< C-s n o t h i n g Enter C-y
   M-> C-r < ! - C-r C-r C-r C-SP C-n C-n C-e M-w C-r S u b m i t < / h 2 > C-r C-n C-n C-y C-a DEL C-p DEL
   M-> C-r < ! - C-r C-r C-r C-r C-SP C-e M-w M-< C-s E m a c s < / h 2 > C-n Cn C-y
   M-> C-r < ! - C-r C-r C-r C-r C-r C-SP C-n C-n C-e M-w M-< C-s h u n t < / h 2 > C-n C-n C-y  
5. M-< C-s e n d SP o f SP H T M L C-n C-a C-SP M-> BACKSPACE
6. C-x u
7. M-< C-s e n d SP o f SP H T M L C-n C-a C-SP M-> M-x comment-region Enter
8. M-< M-% <ol> Enter <oL> Enterrm SP SP SP SP SP SP SP
   Found 7 occurences  
9. Diff file was checked as instructed by question 9

Exercise 1.5
1. e m a c s Enter M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c Enter (I then copied the code from the specifications and right clicked into the file) C-x C-s
3. M-x c o m p i l e Enter C-a C-k g c c SP h e l l o . c Enter
4. C-x C-f h e l l o - o u t C-u M-! . / a . o u t C-x C-s
5. EOF on input

Exercise 1.6
1. C-x b * s c r a t c h * Enter
2. m o s t - n e g a t i v e - f i x n u m C-j
-2305843009213693952
m o s t - p o s i t i v e - f i x n u m C-j
2305843009213693951

As per instructions, I converted the two values into hexadecimal:
(format "%x" most-negative-fixnum) C-j
2000000000000000
(format "%x" most-positive-fixnum) C-j
1fffffffffffffff

When we convert most-negative-fixnum to binary, we get 001000...000 and when we convert most-positive-fixnum to binary we get 00011......1. We know that TMin (the minimum number represented by Two's complement)is 1000...000 and TMax (the maximum number represented by Two's Complement) is 011....1. Thus, we can deduce that most-negative-fixnum is emac's smallest number representation and most-positive-fixnum is emac's largest number representation.  

3. ( r a n d o m SP " 9 0 5 - 0 9 9 - 2 7 5 " ) C-j
2162865536019214741

4. ( s e t q SP x SP ( r a n d o m ) C-j
-552099222277487562
 ( s e t q SP y SP ( r a n d o m ) C-j
1821056477644517299

5. ( * SP x SP y ) C-j
111996040653429698
( s e t q SP p SP 1 1 1 9 9 6 0 4 0 6 5 3 4 2 9 6 9 8 ) C-j
( l o g a n d SP p SP  m o s t - p o s i t i v e - f i x n u m ) C-j
111996040653429698

6. Comparing our value of r to the mathematical product of x and y, we can see that r is not the correct mathematical output. Given that x is negative and y is positive, the product should be negative. Nevertheless, the product is said to be positive, which can likely be attributed to overflow.

7. Given that the computer must follow some type of algorithm to output a "random" number, it is evident that there must be some type of underlying rule that allows the computer to pick a number, which means that they are not truly random, and only in fact mimics "randomness." In fact, random numbers in emacs are generated in a series of pseudo-random values from "a seed value", which explains why a deterministic computer program is not able to emulate real randomness. When an individual is starting from any given seed, the random function perpetually generates the same series of values.

8.Based on what we know about most-negative-fixnum and most-positive-fixnum, we know that most-negative-fixnum could be represented by 00100..00 and most positive-fixnum could be represented by 00011...11, in terms of binary. Granted the left two bits always have to be 0, and both of these values are 16 bytes, we know that in emacs, the range of representible values is 62 bits long. From this information, we know that 62 bits can represent 2^62 different values, and each number has a probability of 1/(2^62) of being sampled. Given two numbers x and y are generated independently from this distribution, an overflow occurs if xy > 2^62. Thus, we want to figure out the probability that x and y will be less than or equal to 2^31, so that an overflow does not occur. We can find the probability of one of these values being less than or equal to 2^31 simply by dividing the number of values that can be represented by 31 bits by thenumber of values that can be represented by 62 bits. This probability that x will be 31 bits long will be 2^31/2^62, and is the probability we need for x so that multiplying it by a 31 bit or shorter y value will not overflow. We can repeat this thinking process to find what the probability of y being in the range 1 and 2^31 is, so that x*y will not lead to an overflow. Thus, the probability that y will be 31 bits long is 2^31/2^62. Multiplying these two probabilities will indicate the probability of two random integers yielding the corxect mathematical answer, which is (2^31/2^62)^2.
